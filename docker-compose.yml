services:
  paperless:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    environment:
      PAPERLESS_OCR_LANGUAGE: "eng"
      PAPERLESS_OCR_LANGUAGES: "eng hun"
      PAPERLESS_TIME_ZONE: "Europe/Budapest"
      PAPERLESS_ADMIN_USER: "admin"
      PAPERLESS_ADMIN_PASSWORD: ${PAPERLESS_ADMIN_PASSWORD}
      PAPERLESS_REDIS: "redis://redis:6379"
    volumes:
      - ./paperless/data:/usr/src/paperless/data
      - ./paperless/media:/usr/src/paperless/media
      - ${PAPERLESS_INBOX}:/usr/src/paperless/consume
      - ./bootstrap:/bootstrap
    ports:
      - "8900:8000"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30
    restart: unless-stopped

  ollama:
    build:
      context: ./ollama
    gpus: all
    environment:
      NVIDIA_VISIBLE_DEVICES: "all"
    volumes:
      - ollama:/root/.ollama
    ports:
      - "11435:11434"
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 10s
      timeout: 5s
      retries: 60
    restart: unless-stopped

  # Token bootstrap via Django inside the container; avoids CSRF
  paperless-token-init:
    build:
      context: ./paperless-token
    environment:
      PAPERLESS_ADMIN_USER: "admin"
      PAPERLESS_ADMIN_PASSWORD: ${PAPERLESS_ADMIN_PASSWORD}
      TOKEN_PATH: "/bootstrap/paperless_token.txt"
      BOOTSTRAP_TIMEOUT: "360"
      DB_PATH: "/usr/src/paperless/data/db.sqlite3"
      PAPERLESS_REDIS: "redis://redis:6379"
    volumes:
      - ./paperless/data:/usr/src/paperless/data
      - ./bootstrap:/bootstrap
    depends_on:
      paperless:
        condition: service_started
      redis:
        condition: service_healthy
    restart: "no"

  importer:
    build:
      context: .
      dockerfile: importer/Dockerfile
    environment:
      PAPERLESS_URL: "http://paperless:8000"
      PAPERLESS_TOKEN_FILE: "/bootstrap/paperless_token.txt"
      OLLAMA_URL: "http://ollama:11434"
      OLLAMA_MODEL: "llama31-kb"
      # Primary Neo4j vars
      NEO4J_URL: "bolt://host.docker.internal:7687"
      NEO4J_USERNAME: ${NEO4J_USERNAME}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      # Compatibility duplicates
      NEO4J_URI: "bolt://host.docker.internal:7687"
      NEO4J_USER: ${NEO4J_USERNAME}
      NEO4J_PASS: ${NEO4J_PASSWORD}
      # Let importer build the proper MCP command with DB params
      MEMORY_MCP_CMD: "/app/.venv/bin/mcp-neo4j-memory"
      # Force processing once to exercise MCP init (disable later)
      FORCE_REPROCESS: "1"
      STATE_PATH: "/data/state.json"
      VAULT_DIR: "/data/obsidian"
      TZ: "Europe/Budapest"
      # Scheduler interval in minutes (item 4)
      SCHEDULE_TIME: "5"
      # Optional tuning (item 1 & 3)
      LOG_FILE: "/data/importer.log"
      CHUNK_SIZE: "5000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./data:/data
      - ./bootstrap:/bootstrap:ro
    depends_on:
      paperless:
        condition: service_started
      paperless-token-init:
        condition: service_completed_successfully
      ollama:
        condition: service_healthy
    restart: unless-stopped

volumes:
  ollama:
